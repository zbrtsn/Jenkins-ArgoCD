pipeline {
    agent any

    environment {
        registryCredential = 'dockerhub-credentials' // Holds the username and password credentials for logging in to Docker Hub
        GIT_REPO_URL = 'https://mtgit.mediatriple.net/zubeyir.tosun/private-basic-to-do-flask.git' // GitLab or GitHub repository URL
        DOCKERHUB_REPO = 'pyouck/basic_todo_flask' // Docker Hub repository URL
        ARGOCD_SERVER = '127.0.0.1:35883' // ArgoCD server address
        ARGOCD_APP = 'app-flask' // Name of the ArgoCD application. It also creates a namespace with this name. You can change it in the YAML file below if needed.
        KUBECONFIG = credentials('kubeconfig-file') // The ID of the kubeconfig file you uploaded. This allows Jenkins to connect to Kubernetes. I think if your Jenkins works on your kubernetes then you don't need to do that.
        KUBE_SERVICE = 'https://kubernetes.default.svc' // The URL of the target Kubernetes cluster
        
        // External code section where you need to make changes:
        // - The "branch" section in the GitLab clone step.
        // - The "tag" sections in the Docker build and push steps.
        // - In the "Check and Manage Secret" step, a credential named "gitlab-login" of type "username with password" should be created containing the GitLab username and password!
        // - In the "Deploy to Kubernetes via ArgoCD" step, a credential named "argocd-password" of type "secret text" should be created containing the password used to log in to ArgoCD!
        // To get the password from the terminal ---> kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
        // - Optionally, the ArgoCD application creation YAML file can be modified.
    }

    stages {
        
        stage('Clone Git Repository') { // The stage where the Git project is cloned
            steps {
                git branch: 'latest', credentialsId: 'gitlab-login', url: "${GIT_REPO_URL}"
            }
        }
        
        stage('Build Docker Image') { // The stage where the project pulled from the repo is built
            steps {
                script {
                    dockerImage = docker.build("${DOCKERHUB_REPO}:test2", "--no-cache .")
                }
            }
        }
        
        stage('Push Docker Image to DockerHub') { // Push to Docker Hub
            steps {
                script {
                    docker.withRegistry('', registryCredential) {
                        dockerImage.push("test2")
                    }
                }
            }
        }

        stage('Deploy to Kubernetes via ArgoCD') {
            steps {
                script {
                    // Logs in with the ArgoCD password from the "argocd-password" credential. The username is "admin" and is hardcoded in the script.
                    withCredentials([string(credentialsId: 'argocd-password', variable: 'PASS')]) {
                        sh """
                        argocd login $ARGOCD_SERVER --username admin --password \$PASS --insecure
                        """
                    }
                }
            }
        }
        
        
        stage('Check and Manage Secret') { // Adds the GitLab repository to ArgoCD. Since the repo is private, we need to establish the connection in between.
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'gitlab-login', usernameVariable: 'GITLAB_USERNAME', passwordVariable: 'GITLAB_PASSWORD')]) {
                        sh """
                        argocd repo add $GIT_REPO_URL \
                          --username \$GITLAB_USERNAME \
                          --password \$GITLAB_PASSWORD
                          """

                    }
                }
            }
        }
        
        
        

        stage('Create ArgoCD Application YAML') { // Creates the YAML file to define the new application in ArgoCD
            steps {
                script {
                    def yamlContent = """
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ${ARGOCD_APP}
  namespace: argocd
spec:
  project: default
  source:
    repoURL: ${GIT_REPO_URL}
    path: .    # The project files are located in the root of the repo, so we get everything without specifying a path.
    targetRevision: HEAD
    directory:
      recurse: true
  destination:
    server: ${KUBE_SERVICE}
    namespace: ${ARGOCD_APP}
  syncPolicy:
    automated:   # Enables ArgoCD to automatically synchronize
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true     # Allows creating the ${ARGOCD_APP} namespace if it does not already exist.
                    """
                    
                    writeFile file: 'argocd-application.yaml', text: yamlContent // Writes the above content to a file named "argocd-application.yaml"
                    
                }
            }
        }
        


        stage('Deploy to Kubernetes via ArgoCD') {
            steps {
                script {
                        // Creates the ArgoCD application according to the instructions in the provided YAML file.
                        sh """
                        argocd app create --file argocd-application.yaml   
                        """
                }
            }
        }
    }
    
    post {
        always {
            cleanWs() // Cleans the Jenkins workspace:
        }
    }
}
